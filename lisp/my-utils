(defun scroll-down-keep-cursor ()
   (interactive)
   (scroll-down 1))

(defun scroll-up-keep-cursor ()
   (interactive)
   (scroll-up 1))


(defun select-current-word ()
  "Select the word under cursor.
“word” here is considered any alphanumeric sequence with “_” or “-”."
  (interactive)
  (let (pt)
	(skip-chars-backward "-_A-Za-z0-9")
	(setq pt (point))
	(skip-chars-forward "-_A-Za-z0-9")
	(set-mark pt)
	))

(defun delete-enclosed-text ()
  "Delete texts between any pair of delimiters."
  (interactive)
  (save-excursion
    (let (p1 p2)
      (skip-chars-backward "^(<[“") (setq p1 (point))
      (skip-chars-forward "^)>]”") (setq p2 (point))
      (delete-region p1 p2))))

(defun delete-current-file ()
  "Delete the file associated with the current buffer. Delete the
current buffer too."
  (interactive)
  (let (currentFile)
    (setq currentFile (buffer-file-name))
    (when (yes-or-no-p (concat "Delete file: " currentFile))
      (kill-buffer (current-buffer))
      (delete-file currentFile)
      (message (concat "Deleted file: " currentFile)))))

(defun insert-date ()
  "Insert date at point."
  (interactive)
  ;(insert (format-time-string "%a %b %e, %Y %l:%M %p")))
  (insert (format-time-string "%m/%d/%Y")))

(provide 'my-utils)
